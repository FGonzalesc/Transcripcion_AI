import openai
import config

class OpenAIProcessor:
    """Clase para procesar la transcripci칩n y extraer insights usando OpenAI."""

    def __init__(self):
        """Inicializa la configuraci칩n de OpenAI."""
        openai.api_key = config.OPENAI_API_KEY

    def extract_insights(self, transcription):
        """Env칤a la transcripci칩n a OpenAI y extrae informaci칩n clave."""

        prompt = f"""
        Eres un asistente de an치lisis de conversaciones de ventas.
        Tu tarea es analizar la conversaci칩n entre un asesor financiero y un cliente para extraer informaci칩n clave y estructurarla en un JSON para generaci칩n de leads.

        游늷 **Devuelve el JSON con la siguiente estructura:**
        - **"cliente"**: Informaci칩n del cliente (nombre, perfil, hijos, parientes enfermos, mascotas).
        - **"situacion_financiera"**: Estado actual, dificultades, deudas, ingresos.
        - **"negocio"**: Si tiene negocio, en qu칠 estado est치 y qu칠 necesita.
        - **"eventos_importantes"**: Cambios en su vida (viajes, mudanza, problemas familiares).
        - **"intereses"**: Lista de temas que parecen ser importantes para el cliente.
        - **"posibles_necesidades"**: Lista de soluciones financieras que podr칤an interesarle.
        - **"prioridad_cliente"**: Cu치l es el tema m치s importante para el cliente y su nivel de urgencia.

        游늷 **IMPORTANTE:**  
        - **Si un dato no se menciona, no lo pongas en el JSON.**
        - **Extrae informaci칩n del cliente (Speaker-Guest-2), no del asesor (Speaker-Guest-1).**
        - **NO agregues explicaciones, solo responde con un JSON v치lido.**

        **Transcripci칩n:**
        {transcription}

        Devuelve 칰nicamente un JSON v치lido sin comentarios ni texto adicional.
        """

        try:
            client = openai.OpenAI(api_key=config.OPENAI_API_KEY) 
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Eres un experto en an치lisis de conversaciones."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3
            )

            insights = response.choices[0].message.content 
            return insights

        except Exception as e:
            print(f"丘멆잺 Error al procesar con OpenAI: {str(e)}")
            return None